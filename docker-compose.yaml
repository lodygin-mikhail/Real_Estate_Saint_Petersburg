version: '3.8'

services:
  fastapi-service:
    build:
      context: ./fastapi_service
    image: fastapi_app:latest
    container_name: fastapi_app
    ports:
      - "6000:6000"
    volumes:
      - ./fastapi_service/fastapi_app.py:/app/fastapi_app.py
      - ./ml_pipeline/models/model.joblib:/app/model.joblib

  streamlit-web:
    build:
      context: ./streamlit_service
    image: streamlit_app:latest
    container_name: streamlit_app
    ports:
      - "8501:8501"
    volumes:
      - ./streamlit_service/streamlit_app.py:/app/streamlit_app.py
      - ./ml_pipeline/artifacts/unique_values.json:/app/unique_values.json

  minio:
    container_name: minio
    hostname: minio
    image: minio/minio:latest
    command: server --console-address ":9001" /data/
    expose:
      - "9000"
      - "9001"
    networks:
      - s3
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    volumes:
      - ./minio/:/data

  s3_setup:
    image: minio/mc:latest
    container_name: s3_setup
    depends_on:
      - minio
    networks:
      - s3
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    entrypoint: [ "/bin/sh", "-c" ]
    command:
      - |
        mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}
        mc admin user svcacct add --access-key ${MLFLOW_AWS_ACCESS_KEY_ID} --secret-key ${MLFLOW_AWS_SECRET_ACCESS_KEY} myminio ${MINIO_ROOT_USER}
        mc mb myminio/${MLFLOW_BUCKET_NAME}
        mc mb myminio/dvc-data
        mc mb myminio/test-bucket

  nginx:
    image: nginx
    container_name: nginx
    hostname: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - s3
    depends_on:
      - minio

  db:
    container_name: postgres
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - postgres

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    volumes:
      - ./pgadmin/:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - postgres

  mlflow:
    restart: always
    build: ./mlflow_server
    image: mlflow_server
    container_name: mlflow_server
    ports:
      - "5000:5000"
    networks:
      - postgres
      - s3
    environment:
      - AWS_ACCESS_KEY_ID=${MLFLOW_AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${MLFLOW_AWS_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=http://nginx:9000
    command: >
      mlflow server
      --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db/${POSTGRES_DB}
      --default-artifact-root s3://${MLFLOW_BUCKET_NAME}/
      --host 0.0.0.0

networks:
  postgres:
    driver: bridge
  s3:
    driver: bridge

volumes:
  postgres: